<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CRIB on CRIB artemis</title>
    <link>https://okawak.github.io/artemis_crib/tags/crib/index.html</link>
    <description>Recent content in CRIB on CRIB artemis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Nov 2023 15:31:58 +0900</lastBuildDate><atom:link href="https://okawak.github.io/artemis_crib/tags/crib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New experiment</title>
      <link>https://okawak.github.io/artemis_crib/setting/new_experiment/index.html</link>
      <pubDate>Thu, 02 Nov 2023 13:58:35 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/new_experiment/index.html</guid>
      <description>last modified: 2023-11-05 by Kodai Okawa If you installed with &amp;ldquo;curl&amp;rdquo; command explained previous chapter, you should have artnew command. This command will make new experiment directory interactively.
Before using this command, please check and make the directory structure!
rawdata directory (like /mnt/data or /data? Create it to suit your situation.) output rootfile directory (like /data/art_output?) git repository local repository: suit for online analysis remote repository: suit for offline analysis Let&amp;rsquo;s start &amp;ldquo;artnew&amp;rdquo; command!</description>
    </item>
    <item>
      <title>New user</title>
      <link>https://okawak.github.io/artemis_crib/setting/new_user/index.html</link>
      <pubDate>Thu, 02 Nov 2023 14:42:56 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/new_user/index.html</guid>
      <description>last modified: 2023-11-05 by Kodai Okawa After artnew command, you can see new directory of config files.
&amp;gt; tree -a art_analysis art_analysis ├── .conf │ ├── artlogin.sh +│ └── test.sh ├── bin │ ├── art_check │ ├── art_setting │ └── artnew +└── test This is experiment name &amp;ldquo;test&amp;rdquo; example. In order to load this script test.sh, please modify &amp;ldquo;EXP_NAME&amp;rdquo; environment valiable in .zshrc.
&amp;#8203; .bashrc/.zshrc .bashrc/.zshrc export EXP_NAME=&amp;#34;test&amp;#34; # your experiment And load the config file.</description>
    </item>
    <item>
      <title>Build</title>
      <link>https://okawak.github.io/artemis_crib/setting/build/index.html</link>
      <pubDate>Thu, 02 Nov 2023 15:11:33 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/build/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa Before starting analysis, you need to build. The current version of the artemis use &amp;ldquo;cmake&amp;rdquo; so the following steps must be taken.
&amp;gt; artlogin (username) &amp;gt; mkdir build &amp;amp;&amp;amp; cd build &amp;gt; cmake .. &amp;gt; make -j4 &amp;gt; make install &amp;gt; acdacd is the alias command that is definded after artlogin command. (acd = cd your_work_directory) Also if you changed some processor, you need to do these process.</description>
    </item>
    <item>
      <title>Map configuration</title>
      <link>https://okawak.github.io/artemis_crib/setting/map_config/index.html</link>
      <pubDate>Thu, 02 Nov 2023 15:31:58 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/map_config/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa From this section, we start to configure the settings according to the actual experimental setup. The setting files are followings:
&amp;gt; tree . ├── mapper.conf ├── conf │ ├── map │ │ ├── ppac │ │ │ ├── dlppac.map -- snip -- │ └── seg │ ├── modulelist.yaml │ └── seglist.yaml -- snip --1. What is the map file? The data obtained from an ADC/TDC is in the form of, for example, &amp;ldquo;The data coming into channel 10 of an ADC with an ID of 1 is 100&amp;rdquo;.</description>
    </item>
    <item>
      <title>artemis</title>
      <link>https://okawak.github.io/artemis_crib/installation/artemis/index.html</link>
      <pubDate>Mon, 14 Aug 2023 14:28:33 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/installation/artemis/index.html</guid>
      <description>last modified: 2023-11-02 by Kodai Okawa From the current situation, CRIB experiment doesn&amp;rsquo;t use GET system, so we describe how to install it without linking it to GET decoder.
Also, it can link to openMPI, but the below commands assume not using openMPI. See artemis repo for more information.
cd hoge git clone https://github.com/artemis-dev/artemis.git -b develop cd artemis mkdir build cd build cmake -DCMAKE_INSTALL_PREFIX=../install .. make -j8 make install source .</description>
    </item>
    <item>
      <title>mount setting</title>
      <link>https://okawak.github.io/artemis_crib/installation/mount/index.html</link>
      <pubDate>Mon, 14 Aug 2023 15:14:29 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/installation/mount/index.html</guid>
      <description>last modified: 2023-11-02 by Kodai Okawa For the convinience, we use one directory to store raw data (ridf files) and make symbolic link to each user work directory. So first, we need to make raw data directory.
There are three option to do so.
use the default SSD/HDD of analysis PC use the external SSD/HDD of analysis PC (need to mount it) use network file system (NFS) and mount it 1 and 2 options are mainly used for offline analysis, while 3 option is used for online analysis.</description>
    </item>
    <item>
      <title>energyloss calculator</title>
      <link>https://okawak.github.io/artemis_crib/installation/energyloss_calculator/index.html</link>
      <pubDate>Mon, 14 Aug 2023 15:14:00 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/installation/energyloss_calculator/index.html</guid>
      <description>last modified: 2023-11-05 by Kodai Okawa Some CRIB-specific files use energy loss libraries. In particular, a library called SRIMlib has been developed by Okawa and some processors need to load this library.
git clone https://github.com/okawak/SRIMlib.git cd SRIMlib mkdir build cd build cmake .. make make installBefore using this library, you need to make database file (just .root file)
cd .. source thisSRIMlib.sh updateIf you want to make energy loss figures, &amp;ldquo;f&amp;rdquo; option will work.</description>
    </item>
    <item>
      <title>art_analysis</title>
      <link>https://okawak.github.io/artemis_crib/installation/art_analysis/index.html</link>
      <pubDate>Mon, 14 Aug 2023 15:14:43 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/installation/art_analysis/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa With this command, all initial settings of &amp;ldquo;art_analysis&amp;rdquo; are made.
curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://okawak.github.io/artemis_crib/bin/init.sh | shAfter that, please add the following lines to the .bashrc/.zshrc.
&amp;#8203; .bashrc/.zshrc .bashrc/.zshrc # this is option source ${HOME}/Cern/root/root_install/bin/thisroot.sh &amp;amp;&amp;gt; /dev/null source ${HOME}/repos/artemis/install/bin/thisartemis.sh &amp;amp;&amp;gt; /dev/null source ${HOME}/repos/SRIMlib/thisSRIMlib.sh &amp;amp;&amp;gt; /dev/null # need from this line! export EXP_NAME=&amp;#34;expname&amp;#34; # your experiment export EXP_NAME_OLD=&amp;#34;expname&amp;#34; # this is option export PATH=&amp;#34;${HOME}/art_analysis/bin:${PATH}&amp;#34; source ${HOME}/art_analysis/bin/art_setting -q The setting is all!</description>
    </item>
  </channel>
</rss>