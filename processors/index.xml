<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Processors on CRIB artemis</title>
    <link>https://okawak.github.io/artemis_crib/processors/index.html</link>
    <description>Recent content in Processors on CRIB artemis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://okawak.github.io/artemis_crib/processors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TTelescopeData</title>
      <link>https://okawak.github.io/artemis_crib/processors/telescope/ttelescopedata/index.html</link>
      <pubDate>Fri, 18 Aug 2023 16:25:33 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/processors/telescope/ttelescopedata/index.html</guid>
      <description>last modified: 2023-08-25 by Kodai Okawa under develop (possibly we will update this data class)
TTelescopeData Data members TVector3 fPos; // detected position (x, y, z) // simulation: actual position // from data: calculated from strip ID Int_t fXID; // X strip ID Int_t fYID; // Y strip ID Double_t fdE; // total energy deposit of dE detector Double_t fE; // total energy deposit of E detector Double_t fEtotal; // total energy deposit of the telescope DoubleVec_t fEnergyArray; // energy array of all the telescope // DoubleVec_t fTimingArray; // not impremented //=============================================================== // no need?</description>
    </item>
    <item>
      <title>TReactionInfo</title>
      <link>https://okawak.github.io/artemis_crib/processors/simulation/treactioninfo/index.html</link>
      <pubDate>Fri, 18 Aug 2023 16:17:21 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/processors/simulation/treactioninfo/index.html</guid>
      <description>last modified: 2023-08-25 by Kodai Okawa TReactionInfo Data member // center of the mass system Double_t fEnergy; // kinetic energy Double_t fTheta; // theta Double_t fPhi; // phi // reaction position Double_t fX; Double_t fY; Double_t fZ; // if you define excited statas, the information stored this value Int_t fExcitedID; Methods Double_t GetEnergy() const { return fEnergy; } void SetEnergy(Double_t arg) { fEnergy = arg; } Double_t GetTheta() const { return fTheta; } void SetTheta(Double_t arg) { fTheta = arg; } Double_t GetPhi() const { return fPhi; } void SetPhi(Double_t arg) { fPhi = arg; } Double_t GetX() const { return fX; } Double_t GetY() const { return fY; } Double_t GetZ() const { return fZ; } void SetXYZ(Double_t x, Double_t y, Double_t z) { fX = x; fY = y; fZ = z; } Int_t GetExID() const { return fExcitedID; } void SetExID(Int_t arg) { fExcitedID = arg; }</description>
    </item>
    <item>
      <title>TParticleInfo</title>
      <link>https://okawak.github.io/artemis_crib/processors/simulation/tparticleinfo/index.html</link>
      <pubDate>Fri, 18 Aug 2023 15:59:35 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/processors/simulation/tparticleinfo/index.html</guid>
      <description>last modified: 2023-08-25 by Kodai Okawa TParticleInfo Data member &amp;#8203; TParticleInfo.cc TParticleInfo.cc 1Int_t fMassNumber; // A: particle mass number 2Int_t fAtomicNumber; // Z: particle atomic number 3Int_t fCharge; // Q: particle charge 4 5Double_t fCurrentZ; // particle z position 6Double_t fEnergy; // particle &amp;#34;kinetic&amp;#34; energy 7 8TTrack fTrack; // tracking information 9TLorentzVector fVec; // relativistic momentum and energy Method (Getter and Setter) &amp;#8203; TParticleInfo.cc TParticleInfo.cc 1void SetMassNumber(Int_t val) { fMassNumber = val; } 2Int_t GetMassNumber() const { return fMassNumber; } 3void SetAtomicNumber(Int_t val) { fAtomicNumber = val; } 4Int_t GetAtomicNumber() const { return fAtomicNumber; } 5void SetCharge(Int_t val) { fCharge = val; } 6Int_t GetCharge() const { return fCharge; } 7 8void SetCurrentZ(Double_t val) { fCurrentZ = val; } 9Double_t GetCurrentZ() const { return fCurrentZ; } 10void SetEnergy(Double_t val) { fEnergy = val; } 11Double_t GetEnergy() const { return fEnergy; } 12 13void SetLorentzVector(Double_t x, Double_t y, Double_t z, Double_t t) { fVec.</description>
    </item>
  </channel>
</rss>