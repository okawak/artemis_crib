import os
import sys
import pyTSrim as sr
import pyMass as mass
import ROOT
from ruamel.yaml import YAML
import numpy as np


class CRIBPID:
    """
    PID calculation at F2 and F3 focal plane.
    It is almost the same with S. Hayakawa-san's application
    https://www.cns.s.u-tokyo.ac.jp/crib/cgi-bin/pid/CRIB_PID_calc.html
    """

    LIGHTSPEED = 299792458.0  # m/s
    KJ2MEV = 6.2415064e12  # J -> MeV
    UNITCHARGE = 1.60217663e-19  # C (A s)
    LENGTHF0F2 = 7.8  # m, length between F0 and F2
    LENGTHF0F3 = 12.97  # m, length between F0 and F3

    def __init__(self, config_path=None):
        if config_path is None:
            raise ValueError(
                "configuration path argument is required and cannot be None"
            )

        if not os.path.exists(config_path):
            raise FileNotFoundError(f"{config_path} does not exist!")

        self.config_path = config_path

        tsrim_home = os.getenv("TSRIM_DATA_HOME")
        if not tsrim_home:
            raise EnvironmentError("Please set the TSrim environment variable!")
        self.tsrim_home = tsrim_home

        self.__load_yaml()
        self.__set_datapoints()

    def __load_yaml(self) -> None:
        yaml = YAML()
        with open(self.config_path, "r", encoding="utf-8") as file:
            try:
                pid_yaml = yaml.load(file)
            except YAML.YAMLError as e:
                raise ValueError(f"Error parsing YAML file '{self.config_path}': {e}")
            except Exception as e:
                raise Exception(f"Unexpected error reading '{self.config_path}': {e}")

        # set ions information
        self.ion_list = pid_yaml["input_ions"]

        # F1 parameters
        f1_yaml = pid_yaml["f1_parameters"]
        self.brho = f1_yaml["brho"]
        self.degrader_material = f1_yaml["degrader_material"]
        self.degrader_thickness = f1_yaml["degrader_thickness"]
        self.rf_period = f1_yaml["rf_period"]

        # F2 parameters
        f2_yaml = pid_yaml["f2_parameters"]
        self.ppac_thickness = f2_yaml["PPAC_thickness"]
        self.ssd_thickness = f2_yaml["SSD_thickness"]
        self.f2_rf_offset = f2_yaml["rf_offset"]
        self.f2_rf_range = f2_yaml["rf_range"]
        self.f2_energy_range = f2_yaml["energy_range"]

        # F3 parameters
        f3_yaml = pid_yaml["f3_parameters"]
        self.a_thickness = f3_yaml["a_thickness"]
        self.b_thickness = f3_yaml["b_thickness"]
        self.ab_distance = f3_yaml["distance"]
        self.trigger_flag = f3_yaml["trigger"]
        self.f3_rf_offset = f3_yaml["rf_offset"]
        self.f3_tof_offset = f3_yaml["tof_offset"]
        self.f3_rf_range = f3_yaml["rf_range"]
        self.f3_tof_range = f3_yaml["tof_range"]

    def __set_datapoints(self) -> None:
        """
        Main PID calculation!
        set data points
        """
        f2_datas = [1, 2, 3]
        f3_datas = [4, 5]
        data_points = [f2_datas, f3_datas]
        self.data_points = data_points

    def show_f2_pid(self):
        f2_datas = self.data_points[0]
        print(f2_datas)

    def show_f3_pid(self):
        f3_datas = self.data_points[1]
        print(f3_datas)

    def MeV_to_ms(self, energy: float, mass: float) -> float:
        """
        energy: MeV, mass: MeV/c**2
        MeV -> m/s
        """
        return self.LIGHTSPEED * np.sqrt(1.0 - (1.0 / (energy / mass + 1.0)) ** 2)

    def check_vars(self) -> None:
        """
        For debug, show all class members
        """
        for key, value in self.__dict__.items():
            print(f"{key}: {value}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python CRIB_PID.py <path to config yaml>")
        sys.exit(1)

    obj = CRIBPID(sys.argv[1])
    obj.show_f2_pid()
    print()
    obj.show_f3_pid()
