<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setting on CRIB artemis</title>
    <link>https://okawak.github.io/artemis_crib/setting/index.html</link>
    <description>Recent content in Setting on CRIB artemis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://okawak.github.io/artemis_crib/setting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New experiment</title>
      <link>https://okawak.github.io/artemis_crib/setting/new_experiment/index.html</link>
      <pubDate>Thu, 02 Nov 2023 13:58:35 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/new_experiment/index.html</guid>
      <description>last modified: 2023-11-05 by Kodai Okawa If you installed with &amp;ldquo;curl&amp;rdquo; command explained previous chapter, you should have artnew command. This command will make new experiment directory interactively.
Before using this command, please check and make the directory structure!
rawdata directory (like /mnt/data or /data? Create it to suit your situation.) output rootfile directory (like /data/art_output?) git repository local repository: suit for online analysis remote repository: suit for offline analysis Let&amp;rsquo;s start &amp;ldquo;artnew&amp;rdquo; command!</description>
    </item>
    <item>
      <title>New user</title>
      <link>https://okawak.github.io/artemis_crib/setting/new_user/index.html</link>
      <pubDate>Thu, 02 Nov 2023 14:42:56 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/new_user/index.html</guid>
      <description>last modified: 2023-11-05 by Kodai Okawa After artnew command, you can see new directory of config files.
&amp;gt; tree -a art_analysis art_analysis ├── .conf │ ├── artlogin.sh +│ └── test.sh ├── bin │ ├── art_check │ ├── art_setting │ └── artnew +└── test This is experiment name &amp;ldquo;test&amp;rdquo; example. In order to load this script test.sh, please modify &amp;ldquo;EXP_NAME&amp;rdquo; environment valiable in .zshrc.
&amp;#8203; .bashrc/.zshrc .bashrc/.zshrc export EXP_NAME=&amp;#34;test&amp;#34; # your experiment And load the config file.</description>
    </item>
    <item>
      <title>Build</title>
      <link>https://okawak.github.io/artemis_crib/setting/build/index.html</link>
      <pubDate>Thu, 02 Nov 2023 15:11:33 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/build/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa Before starting analysis, you need to build. The current version of the artemis use &amp;ldquo;cmake&amp;rdquo; so the following steps must be taken.
&amp;gt; artlogin (username) &amp;gt; mkdir build &amp;amp;&amp;amp; cd build &amp;gt; cmake .. &amp;gt; make -j4 &amp;gt; make install &amp;gt; acdacd is the alias command that is definded after artlogin command. (acd = cd your_work_directory) Also if you changed some processor, you need to do these process.</description>
    </item>
    <item>
      <title>artemis commands</title>
      <link>https://okawak.github.io/artemis_crib/setting/artemis_commands/index.html</link>
      <pubDate>Tue, 14 Nov 2023 11:23:31 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/artemis_commands/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa Before configuring the settings according to your experiment, let&amp;rsquo;s check that artemis is working!
&amp;gt; artlogin (username) &amp;gt; a # start the artemis!Then the prompt change to the artemis [0]. This means you are in artemis console!
Analysis using artemis use event loop. It is therefore necessary to load a file that specifies what kind of analysis is to be performed. This file is called the steering file.</description>
    </item>
    <item>
      <title>Map configuration</title>
      <link>https://okawak.github.io/artemis_crib/setting/map_config/index.html</link>
      <pubDate>Thu, 02 Nov 2023 15:31:58 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/map_config/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa From this section, we start to configure the settings according to the actual experimental setup. The setting files are followings:
&amp;gt; tree . ├── mapper.conf ├── conf │ ├── map │ │ ├── ppac │ │ │ ├── dlppac.map -- snip -- │ └── seg │ ├── modulelist.yaml │ └── seglist.yaml -- snip --1. What is the map file? The data obtained from an ADC/TDC is in the form of, for example, &amp;ldquo;The data coming into channel 10 of an ADC with an ID of 1 is 100&amp;rdquo;.</description>
    </item>
    <item>
      <title>Steering</title>
      <link>https://okawak.github.io/artemis_crib/setting/steering/index.html</link>
      <pubDate>Thu, 02 Nov 2023 17:03:39 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/steering/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa The steering file (yaml format) is a file that directs the process of how the obtained data is to be processed. The artemis is an object-oriented program whose components are called processors, which are combined to process data.
The main role of the &amp;ldquo;processor&amp;rdquo; is to process data from an input data called InputCollection and create an output data called OutputCollection. This &amp;ldquo;OutputCollection&amp;rdquo; will be stored into the root file as a &amp;ldquo;tree&amp;rdquo;.</description>
    </item>
    <item>
      <title>Histograms</title>
      <link>https://okawak.github.io/artemis_crib/setting/histograms/index.html</link>
      <pubDate>Thu, 02 Nov 2023 17:03:45 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/histograms/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa In the online analysis, it is important to have immediate access to data. The artemis can produce TTree object but long commands are needed to access, for example,
artemis [1] fcd 0 # move to the created rootfile artemis [2] zone 2 2 # make a &amp;#34;artemis&amp;#34; 2x2 canvas artemis [3] tree-&amp;gt;Draw(&amp;#34;ssd_cal.fCharge:ssd_cal.fTiming&amp;gt;(100,0.,100., 100,0.,100)&amp;#34;,&amp;#34;ssd_cal.fCharge &amp;gt; 1.0&amp;#34;,&amp;#34;colz&amp;#34;)This would take time if there are some histograms that you want to display immediately&amp;hellip;</description>
    </item>
    <item>
      <title>VNC server</title>
      <link>https://okawak.github.io/artemis_crib/setting/vncserver/index.html</link>
      <pubDate>Thu, 02 Nov 2023 17:23:05 +0900</pubDate>
      <guid>https://okawak.github.io/artemis_crib/setting/vncserver/index.html</guid>
      <description>last modified: 2023-11-14 by Kodai Okawa need to consider&amp;hellip;</description>
    </item>
  </channel>
</rss>